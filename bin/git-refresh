#!/usr/bin/env bash

# vim: filetype=sh

# vim: filetype=sh

function show_help() {
    less <<END
$(basename "$0") [-?|-h|--help|-s|--stash]

    -h --help   Show this help and exit
    -s --stash  Stash changes, if needed

Stashes any local changes, if necessary.

Regardless of the branch you are on, this code:
- stashes changes (if any) (if --stash is passed)
- checks out default branch
- Do a fast-forward merge
- checks out your branch (if it's not default branch)
- rebases onto default branch (if branch is not default branch)
- pops changes from stash, if any

Note that if there is a conflict during rebase, any changes remaining
will stay stashed.

This project is on github at https://github.com/Ovid/git-workflow

CONFIG FILE

Requires that the current directory have a .git-hub file in the following
format:

    target main

DEPENDENCIES

END
}

stash=0

# Parse arguments
POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"
case $key in
    -s|--stash)
    stash=1
    shift
    ;;
    -?|-h|--help)
    shift # past argument
    show_help;
    exit;
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

set -Eeuo pipefail

# make sure we have a .git-hub config file
config=./.git-hub
if test -f $config ; then
    while read var value
    do
        # skip comments in config file
        [[ $var =~ ^\s*# ]] && continue

        # skip blank lines
        [[ $var =~ ^\s*$ ]] && continue
        export "$var"="$value"
    done < $config
else
  echo "No $config config file found in current directory"
  exit 2
fi

# make sure key variables are set
if [ -z ${target+x} ]; then echo "target is not set in $config file";  exit 3; fi

prog=$(basename $0)
branch=$(git rev-parse --abbrev-ref HEAD)
need_to_stash=$(git status --porcelain -uno)

if [ "$branch" == "$target" ]; then
  git fetch -p
  if git rev-parse '@{u}' >/dev/null 2>&1; then
    if [[ $need_to_stash ]]; then
      if [ $stash == 1 ]; then
        git stash save "stashed by $prog (on branch $branch)"
        git fetch -p
        git pull --ff-only
        git stash pop --index
      else
        echo You have uncommitted changes. Commit or stash them before rerunning $prog
        exit 1
      fi
    else
      git pull --ff-only
    fi
  fi
  exit 0
else
  if [[ $need_to_stash ]]; then
    if [ $stash == 1 ]; then
      git stash save "stashed by $prog (on branch $branch)"
    else
        echo You have uncommitted changes. Commit or stash them before rerunning $prog
        exit 1
      fi
  fi
  git checkout $target
  git fetch -p
  git pull --ff-only
  git checkout $branch

  if [[ $(git rebase $target) ]]; then
    if [[ $need_to_stash ]]; then
      git stash pop
    fi
  else
    if [[ $need_to_stash ]]; then
      echo You have changes stashed by $prog
      exit 1
    fi
  fi
fi

# Regardless of the branch you are on, this code:
# - stashes changes (if any)
# - checks out $target
# - Do a fast-forward merge
# - checks out your branch (if it's not $target)
# - rebases onto $target (if branch is not $target)
# - pops changes from stash, if any
