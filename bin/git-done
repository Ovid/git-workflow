#!/usr/bin/env bash

# vim: filetype=sh

function show_help() {
    less <<END
$(basename "$0") [-h|--help] [-y|--yes]

    -h --help Show this help and exit
    -y --yes  Merge this branch to the target without prompting

Attempts to safely merge this branch on top of your target branch.

This project is on github at https://github.com/Ovid/git-workflow

CONFIG FILE

Requires that the current directory have a .git-hub file in the following
format:

    target main

You can get a personal access token from:

DEPENDENCIES

END
}

# confirmation prompt by default
prompt=1

# Parse arguments

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"
case $key in
    -?|-h|--help)
    shift # past argument
    show_help;
    exit;
    ;;
    -y|--yes)
    prompt=0
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

set -Eeuo pipefail

if [ -z ${1+x} ]; then

    # default to current branch
    branch=$(git rev-parse --abbrev-ref HEAD)
else
    branch="$1"
fi

# make sure we have a .git-hub config file
config=./.git-hub
if test -f $config ; then
    while read var value
    do
        # skip comments in config file
        [[ $var =~ ^\s*# ]] && continue

        # skip blank lines
        [[ $var =~ ^\s*$ ]] && continue
        export "$var"="$value"
    done < $config
else
  echo "No $config config file found in current directory"
  exit 2
fi

# make sure key variables are set
if [ -z ${target+x} ]; then echo "target is not set in $config file";  exit 3; fi

if [ "$branch" == "$target" ]; then
    echo ERROR: You must checkout the branch to be merged or supply branch as argument
    exit 1
fi

if [ $prompt == 1 ]; then
    echo You are going to merge branch $branch with remote $target.
    echo -n "If this is what you want to do please confirm with [Yes]: "
    read response
    if [ "X$response" != "XYes" ]; then
        echo "exiting due to lack of 'Yes' response"
        exit
    fi
fi

## pull latest master
git checkout $target
git fetch --prune
git merge --ff-only origin/$target

## rebase branch against master and push back to origin
git rebase $target $branch
git push --force-with-lease origin $branch

## merge branch onto master and push
git checkout $target
git merge --no-ff $branch

## push new master
git push origin $target

echo
echo Branch successfully merged and pushed.
echo
echo You should now cleanup your branch if you no longer need it using:
echo
echo git branch -d $branch
echo git push origin :$branch
echo
echo "And don't forget to close any issues that your PR has addressed."
echo
