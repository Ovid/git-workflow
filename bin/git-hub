#!/usr/bin/env bash

# vim: filetype=sh

function show_help() {
    less <<END
$(basename "$0") [-h]  ticket_number

    -h --help Show this help and exit

Attempts to grab the ticket of ticket_number and create a branch
of the current branch using the ticket name and number.

If the ticket status is not "open", it will abort.

This project is on github at https://github.com/Ovid/git-workflow

CONFIG FILE

Requires that the current directory have a .git-hub file in the following
format:

    user   Ovid
    repo   git-workflow
    token  <personal access token>

You can get a personal access token from:

https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token

We strongly recommend that you get a "read-only" token for use with this. If
it had more privileges, falling into the wrong hands might be a security hole.

DEPENDENCIES

This script requires git, jq, perl, curl, tail, sed. Most of these are
standard on Linux and Mac OS X.

You must have "jq" in your PATH to parse JSON. You may download it
from https://stedolan.github.io/jq/.

You must have Perl 5.8 or above in your path. If the title of your ticket has
non-ASCII characters, you must also have Text::Unidecode
(https://metacpan.org/pod/Text::Unidecode) installed with Perl. This module
has no non-core dependencies. You can install it with:

    cpan Text::Unidecode
END
}

# make sure we have jq installed
jq=$(which jq)
if [ -z "${jq+x}" ] ; then
    echo "You must have jq in your path: https://stedolan.github.io/jq/"
    exit 1
fi

# Parse arguments
POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"
case $key in
    -?|-h|--help)
    shift # past argument
    show_help;
    exit;
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

if [[ -z "$1" ]]; then
    echo "Please provide a github ticket number"
    echo "Usage: $0 github-ticket-number"
    exit 1
else
    ticket="$1"
fi

set -Eeuo pipefail

# read our config file
config=./.git-hub
if test -f $config ; then
    while read var value
    do
        # skip comments in config file
        [[ $var =~ ^\s*# ]] && continue

        # skip blank lines
        [[ $var =~ ^\s*$ ]] && continue
        export "$var"="$value"
    done < $config
else
  echo "No $config config file found in current directory"
  exit 2
fi

# make sure key variables are set
if [ -z ${user+x} ];  then echo "user is not set in $config file";  exit 3; fi
if [ -z ${repo+x} ];  then echo "repo is not set in $config file";  exit 3; fi
if [ -z ${token+x} ]; then echo "token is not set in $config file"; exit 3; fi

# Fetch our JSON
# https://unix.stackexchange.com/questions/572424/retrieve-both-http-status-code-and-content-from-curl-in-a-shell-script
url="https://api.github.com/repos/$user/$repo/issues/$ticket"
response=$(curl -H "Authorization: token $token" -s -w "%{http_code}" $url)

http_code=$(tail -n1 <<< "$response")  # get the last line
content=$(sed '$ d' <<< "$response")   # get all but the last line which contains the status code

# if it's not a 200 response, assume we failed
if [[ "$http_code" -ne 200 ]]; then
    echo "GET $url failed with code $http_code";
    exit 4;
fi

state=$(echo "$content" | $jq --raw-output '.state')
title=$(echo "$content" | $jq '.title')

# if title contains any non-ASCII characters ...
if [[ $title = *[![:ascii:]]* ]]; then
    if [ -z $(perldoc -l Text::Unidecode) ]; then
        echo "You must install the Perl module Text::Unidecode. Try the command:"
        echo "cpan Text::Unidecode"
        exit 1
    fi

    title=$(perl -CAS -MText::Unidecode=unidecode -e 'print unidecode(join " " => @ARGV)' $title)
fi
export git_hub_title="$title $ticket"
branch=$(perl <<'__HERE__'
my $name = lc $ENV{git_hub_title};
$name =~ s/^\s+|\s+$//g;    # trim
$name =~ s/\s+/_/g;
$name =~ tr/-/_/;
$name =~ s/__*/_/g;
$name =~ s/\W//g;
$name =~ tr/_/-/;
$name =~ s/--/-/g;
print $name
__HERE__
)

if [[ "$state" != "open" ]]; then
    echo "Ticket $ticket: $title"
    echo "Not creating the branch '$branch' because it is not 'open' (it's '$state')"
    exit 5
fi
git checkout -b $branch
