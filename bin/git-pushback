#!/usr/bin/env bash

# vim: filetype=sh

function show_help() {
    less <<END
$(basename "$0")

    -? -h --help Show this help and exit
    -force Force the push (use with caution!)

Attempts to push this branch back to origin with the current branch name. You
can only use 'git pushback' a branch that is not your target branch (see
CONFIG FILE below)

This project is on github at https://github.com/Ovid/git-workflow

CONFIG FILE

Requires that the current directory have a .git-hub file in the following
format:

    target main

DEPENDENCIES

END
}

POSITIONAL=()
force=
while [[ $# -gt 0 ]]
do
key="$1"
case $key in
    -f|--force)
    shift # past argument
    force=1;
    ;;
    -?|-h|--help)
    shift # past argument
    show_help;
    exit;
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

set -Eeuo pipefail

# default to current branch
branch=$(git rev-parse --abbrev-ref HEAD)

# make sure we have a .git-hub config file
config=./.git-hub
if test -f $config ; then
    while read var value
    do
        # skip comments in config file
        [[ $var =~ ^\s*# ]] && continue

        # skip blank lines
        [[ $var =~ ^\s*$ ]] && continue
        export "$var"="$value"
    done < $config
else
  echo "No $config config file found in current directory"
  exit 2
fi

# make sure key variables are set
if [ -z ${target+x} ]; then echo "target is not set in $config file";  exit 3; fi

if [ "$branch" == "$target" ]; then
    echo ERROR: You must checkout the branch to be merged or supply branch as argument
    exit 1
fi

if [ "$branch" == "$target" ]; then
    echo You cannot pushback $target. You must be on a branch.
    exit 1
else
    if [ -z "$force" ]; then
        git push --set-upstream origin $branch
    else
        git push -f --set-upstream origin $branch
    fi
fi
